= content_for :title, "Edit Selected Locations"
.block
  .block_head
    %h2 Update Locations
    %ul
      %li.nobg= link_to "Add Category", "#/category/add"
      %li.nobg= link_to "Remove Category", "#/category/remove"
      %li.nobg= link_to "Change Status", "#/status/change"
    %span
      For selected locations only
  .block_content
    %table.layout
    = form_for "locations", :url => "/locations", :html=>{:method=>:put} do |form|
      %table.list.updates
        %thead
          %tr
            %th
              %input{:type=>"checkbox"}
            %th Name
            %th Long Name
            %th Status
            %th Categories
            %th Comments
        %tbody 
        - @locations.each_with_index do |location, i|
          %tr{"data-id"=>location.id}
            %td.selector
              %input{:type=>"checkbox"}
            %td.name= form.text_field "[#{i}][name]", :value => location.name
            %td.long_name= form.text_field "[#{i}][long_name]", :value => location.long_name
            %td.status
              =select_tag "locations[#{i}][status]", options_for_select(workflow_actions(current_user, location), location.status)
              =form.hidden_field "[#{i}][id]", :value => location.id
            %td.tags              
              %span.list
                = render :partial => "tags/collection", :locals => {:items => location.tags.map {|c| {:name => c.category.french, :delete_link => location_tag_url(c.location_id, c.id)}}}
            %td.comments
              = link_to location.comments.count, "#/comments/#{location.id}"

      %div{:style=>"text-align: right; margin-right: 15px; margin-bottom: 20px"}
        = submit_tag "Confirm Changes", :class => "button mid", :style => "position: relative; left: 20px"

  %script#category-widget{:type=>"text/html"}
    = select_tag("category_id", options_for_select(@categories), :class => "styled_select")
    %a.accept{:href=>"#"} Accept
    %a.cancel{:href=>"#"} Cancel

  %script#comments-cache
    = raw "var comments_cache = #{@comments_cache}"

  %script#status-widget{:type=>"text/html"}
    = select_tag "status_switcher", options_for_select(workflow_actions(current_user, nil).insert(0, "")), :class => "styled_select"
    %a.accept{:href=>"#"} Accept
    %a.cancel{:href=>"#"} Cancel

:javascript
  (function($) {

    var app = Sammy('.collection_edit', function() {

      this.use(Sammy.StatusWidget, "status-widget");
      this.use(Sammy.CategoryWidget, "category-widget");
      this.use(Sammy.MultiSelectorWidget, ".list.updates");

      this.get("#/", function() {
        $(document).trigger('close.facebox');
      })

      this.get("#/comments/:location_id", function(context) {
        var location_id = this.params['location_id'];
        var comments = _.select(comments_cache, function(x) {return x["location_id"] == parseInt(location_id)});
        var output = JST['client.rendering/comment_widget']({comments: comments});
        jQuery.facebox({domElement: $(output)});
        var overlay = $("#facebox .content");
        overlay
          .addClass("comments-widget").addClass("widget")
          .append($("#comments-widget").html());
        overlay.find("a.accept").click(function() {
            //var comment = $(".comments.new textarea").val();
            var new_comment = "TESTING";
            $.ajax({
              type: 'POST',
              url: "/locations/" + location_id + "/comments",
              data: {"comment[comment]": new_comment},
              success: function(data) {
                var counter = $('div[data-location-id=' + location_id + "]");
                var old_count = parseInt(counter.html());
                counter.text(old_count + 1);
              }
            });
          });
        overlay.find("a.cancel").click(function() {
          context.redirect("#/");
        });
      });

      this.get('#/category/add', function(context) {
        if (!context.hasSelection()) return this.showSelectionError("#");
        this.showCategoryWidget("Add", "add_tag", function(data) {
          $.each(data, function(index, item) {context.addTag(item)})
        }, context);
      });

      this.get('#/category/remove', function(context) {
        if (!context.hasSelection()) return this.showSelectionError("#");
        this.showCategoryWidget("Remove", "remove_tag", function(data) {
          $.each(data, function(index, item) {context.removeTag(item)})
        }, context);
      });

      this.get('#/status/change', function(context) {
        if (!context.hasSelection) return this.showSelectionError("#");
        this.showStatusWidget(context);
      });

    });

    $(function() {
      app.run('#/');
    });

  })(jQuery);


