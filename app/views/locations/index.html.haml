= content_for :title, "Points of Interest"

= include_javascripts :mapping
= stylesheet_link_tag 'ext-all.css'

.block
  .block_head
    %h2 Points of Interest
  .block_content
    #portlets
      %br
      .portlet.ui.widget.ui-widget-content.ui-helper-clearfix.ui-corner-all
        .portlet-header.fixed.ui-widget-header.ui-corner-top
          Spatial Listing
          %span{:style=>"float: right"}
            = link_to "Select", "#"
        .portlet-content.nopadding
          #mappanel
      %br
      = semantic_form_for :locations, :url => new_export_path do
        .portlet.ui.widget.ui-widget-content.ui-helper-clearfix.ui-corner-all
          .portlet-header.fixed.ui-widget-header.ui-corner-top
            Tabular Listing
            %span{:style=>"float: right"}
              - unless @locations.empty?
                - if @locations.any? {|l| current_user.may_update_location?(l)}
                  = link_to "Edit |", "#"
                - if @locations.any? {|l| current_user.may_destroy_location?(l)}
                  = link_to "Delete |", "#"
                = link_to "Export", "#"
          .portlet-content.nopadding
            %table.main{:cellspacing => "0", :cellpadding => "0", :style => "margin-left: 0px"}
              %tbody
                %tr
                  %th
                    %input{:type=>"checkbox"}
                  %th
                    = link_to "Name", "#", :"data-sort" => "name"
                  %th
                    = link_to "City", "#", :"data-sort" => "city_name"
                  %th.tags
                    Tags
                  %th.added_by
                    = link_to "Added By", "#", :"data-sort" => "username"
                  %th.date_added
                    = link_to "Date Added", "#", :"data-sort" => "created_at"
                  %th.last_changed
                    = link_to "Last Changed", "#", :"data-sort" => "updated_at"
                  %th.status
                    = link_to "Status", "#", :"data-sort" => "status"
                - @locations.each do |location|
                  %tr
                    %td.selector
                      %input{:type=>"checkbox", :name=>"locations[]", :value => "#{location.id}"}
                    %td.name
                      - if location.name.length > 40
                        = image_tag("warning-icon.png")
                      = link_to location.name, edit_location_path(location)
                    %td= location.city_name
                    %td= location.tags.map {|t| t.category.french}.join(", ") || ""
                    %td= location.username
                    %td= location.created_at.strftime("%d-%m-%Y")
                    %td= location.updated_at.strftime("%d-%m-%Y")
                    %td= location.status.to_s.humanize.upcase
            %br
              %div{:style=>"margin-right: 20px"}
                = render :partial => "shared/paging", :locals => {:collection => @locations, :page_size => @search.per_page}
            %div.clear
            %span{:style=>"float: right; margin-bottom: 20px; margin-right: 20px"}
              = page_entries_info @locations

:javascript
  var settings = new Spatial.Models.Settings();
  var map = new Spatial.Models.Map(settings);

  $(document).ready(function() {

    $("th a").click(function() {
      url = jQuery.param.querystring(window.location.href, {sort: $(this).data("sort"), page: 1});
      window.location = url;
    });

    $("th input[type=checkbox]").click(function() {
      var master = $(this);
      var isChecked = master.attr("checked");
      $("td input[type=checkbox]").attr("checked", isChecked);
    });

    var collection_change = function(url, method) {
      if ($("td.selector input:checked").length < 1) {
        alert("Please select one or more locations");
        return false;
      }
      $("form").attr("action", url);      
      if (method)   $('<input type="hidden" name="_method" value="' + method + '" />').appendTo($("form"));
      $("form").submit();
      return false;
    }

    $("a:contains('Edit |')").click(function() {
      return collection_change('locations/edit')
    });

    $("a:contains('Delete |')").click(function() {
      return collection_change('locations', 'delete')
    });

    $("a:contains('Export')").click(function() {
      $("form").attr("action", "/exports/prepare");
      $("form").submit();
      return false;
    });

    Ext.onReady(function() {

      var vecLayer = new OpenLayers.Layer.Vector("vector");
      map.instance.addLayer(vecLayer);

      var mapPanel = new GeoExt.MapPanel({
          region: "center",
          height: 200,
          width: 400,
          map: map.instance,
          bbar: [
             {  text: "Edit",
                handler: function() {
                  var selected = vecLayer.selectedFeatures;
                  if (selected.length < 1) return;
                  if (selected.length == 1) {
                    $("input[value=" + selected[0].fid + "]").parents("tr").find("td.name a").click();
                  } else {
                    $("input[name='locations[]']").attr("checked", false);
                    for(i = 0; i < selected.length; i++) {
                      $("input[value=" + selected[i].fid + "]").attr("checked", true);
                    }
                    $("li.collection_edit a").click();
                  }
                }
            }]
      });

      var style = new OpenLayers.Style({'fillColor': '#66C17B', 'fillOpacity': 0.6, 'pointRadius': 6, 'strokeWidth': 1, 'strokeColor': '#000'});
      var style_map = new OpenLayers.StyleMap({'default': style});
      vecLayer.styleMap = style_map;
      vecLayer.events.register('featuresadded', this, function(features) {
        map.instance.zoomToExtent(vecLayer.getDataExtent());
      });

      var featureStore = new GeoExt.data.FeatureStore({
        layer: vecLayer,
        fields: [
            {name: 'name', type: 'string'}
        ],
        proxy: new GeoExt.data.ProtocolProxy({
            protocol: new OpenLayers.Protocol.HTTP({
                url: "features",
                headers: {"Accept": "application/json"},
                params: {"source": "search"},
                format: new OpenLayers.Format.GeoJSON()
            })
        }),
        autoLoad: true
      });

      var gridPanel = new Ext.grid.GridPanel({
        title: "Points of Interest",
        region: "east",
        store: featureStore,
        autoExpandColumn: "name",
        width: 420,
        columns: [{
          header: "Name",
          dataIndex: "name",
          resizable: false,
          id: "name"
        }],
        sm: new GeoExt.grid.FeatureSelectionModel()
      });

      var mainPanel = new Ext.Panel({
        renderTo: "mappanel",
        layout: "border",
        height: 200,
        width: 898,
        items: [mapPanel, gridPanel]
      });

      vecLayer.events.register('featureselected', null, function(e) {
        var feature = e.feature;
        feature.layer.map.moveTo(feature.geometry.bounds.getCenterLonLat());
      });

    });

  });

