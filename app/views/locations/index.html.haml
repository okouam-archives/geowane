= content_for :title, "Points of Interest"

= include_javascripts :mapping
= stylesheet_link_tag 'ext-all.css'

.block
  .block_head
    %h2 Points of Interest
    %ul
      %li.nobg= link_to "New Location", new_location_path
      - unless @locations.empty?
        - if @locations.any? {|l| current_user.may_update_location?(l)}
          %li.nobg.collection_edit= link_to "Edit Selection", "#"
        - if @locations.any? {|l| current_user.may_destroy_location?(l)}
          %li.nobg.collection_delete= link_to "Delete Selection", "#"
        %li.nobg.export= link_to "Export Selection", "#"
  .block_content
    %br
    #mappanel
    %br
    = semantic_form_for :locations, :url => new_export_path do
      %table.main{:cellspacing => "0", :cellpadding => "0", :style => "margin-left: 0px"}
        %tbody
          %tr
            %th
              %input{:type=>"checkbox"}
            %th
              = link_to "Name", "#", :"data-sort" => "name"
            %th
              = link_to "City", "#", :"data-sort" => "city_name"
            %th.tags
              Tags
            %th.added_by
              = link_to "Added By", "#", :"data-sort" => "username"
            %th.date_added
              = link_to "Date Added", "#", :"data-sort" => "created_at"
            %th.last_changed
              = link_to "Last Changed", "#", :"data-sort" => "updated_at"
            %th.status
              = link_to "Status", "#", :"data-sort" => "status"
          - @locations.each do |location|
            %tr
              %td.selector
                %input{:type=>"checkbox", :name=>"locations[]", :value => "#{location.id}"}
              %td.name
                - if location.name.length > 40
                  = image_tag("warning-icon.png")
                = link_to location.name, edit_location_path(location)
              %td= location.city_name
              %td= location.tags.map {|t| t.category.french}.join(", ") || ""
              %td= location.username
              %td= location.created_at.strftime("%d-%m-%Y")
              %td= location.updated_at.strftime("%d-%m-%Y")
              %td= location.status.to_s.humanize.upcase
    %br
      %div
        = render :partial => "shared/paging", :locals => {:collection => @locations}
    %div.clear
    %span{:style=>"float: right; margin-bottom: 20px"}
      = page_entries_info @locations

:javascript
  $(document).ready(function() {

    $("th a").click(function() {
      url = jQuery.param.querystring(window.location.href, {sort: $(this).data("sort"), page: 1});
      window.location = url;
    });

    $("th input[type=checkbox]").click(function() {
      var master = $(this);
      var isChecked = master.attr("checked");
      $("td input[type=checkbox]").attr("checked", isChecked);
    });

    var collection_change = function(url, method) {
      if ($("td.selector input:checked").length < 1) {
        alert("Please select one or more locations");
        return false;
      }
      $("form").attr("action", url);      
      if (method)   $('<input type="hidden" name="_method" value="' + method + '" />').appendTo($("form"));
      $("form").submit();
      return false;
    }

    $("li.collection_edit a").click(function() {
      return collection_change('locations/edit')
    });

    $("li.collection_delete a").click(function() {
      return collection_change('locations', 'delete')
    });

    $("li.export a").click(function() {
      $("form").attr("action", "/exports/prepare");
      $("form").submit();
      return false;
    });

    Ext.onReady(function() {
      var settings = new Spatial.Models.Settings();
      var map = new Spatial.Models.Map(settings);

      var mapPanel = new GeoExt.MapPanel({
          region: "center",
          height: 200,
          width: 400,
          map: map.instance
      });

      var vecLayer = new OpenLayers.Layer.Vector("vector");
      map.instance.addLayer(vecLayer);

      var featureStore = new GeoExt.data.FeatureStore({
        layer: vecLayer,
        fields: [
            {name: 'name', type: 'string'}
        ],
        proxy: new GeoExt.data.ProtocolProxy({
            protocol: new OpenLayers.Protocol.HTTP({
                url: "features",
                headers: {"Accept": "application/json"},
                params: {"source": "search"},
                format: new OpenLayers.Format.GeoJSON()
            })
        }),
        autoLoad: true
      });

      var gridPanel = new Ext.grid.GridPanel({
        title: "Points of Interest",
        region: "east",
        store: featureStore,
        autoExpandColumn: "name",
        width: 420,
        columns: [{
          header: "Name",
          dataIndex: "name",
          resizable: false,
          id: "name"
        }],
        sm: new GeoExt.grid.FeatureSelectionModel()
      });

      var mainPanel = new Ext.Panel({
        renderTo: "mappanel",
        layout: "border",
        height: 200,
        width: 920,
        items: [mapPanel, gridPanel]
      });

      vecLayer.events.register('featureselected', null, function(e) {
        var feature = e.feature;
        feature.layer.map.moveTo(feature.geometry.bounds.getCenterLonLat());
      });

    });

  });

